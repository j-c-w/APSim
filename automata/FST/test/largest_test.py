import time
import unittest
import automata.FST.algebra as alg


class LargeTest(unittest.TestCase):
    def test_testcase(self):
        nodes = [0, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762]

        edges = [(0, 1716), (1686, 1686), (1686, 1687), (1687, 1688), (1687, 1689), (1688, 1688), (1688, 1689), (1689, 1690), (1690, 1691), (1691, 1692), (1692, 1693), (1692, 1694), (1693, 1693), (1693, 1694), (1694, 1696), (1694, 1695), (1695, 1696), (1695, 1695), (1696, 1697), (1696, 1718), (1696, 1705), (1697, 1698), (1698, 1699), (1699, 1700), (1700, 1701), (1701, 1702), (1702, 1703), (1703, 1704), (1704, 1733), (1705, 1706), (1706, 1707), (1707, 1708), (1708, 1709), (1709, 1710), (1710, 1711), (1711, 1712), (1712, 1713), (1713, 1714), (1714, 1715), (1715, 1717), (1716, 1727), (1717, 1733), (1718, 1719), (1719, 1720), (1720, 1721), (1721, 1729), (1721, 1722), (1722, 1723), (1723, 1724), (1724, 1725), (1725, 1726), (1726, 1728), (1727, 1738), (1728, 1733), (1729, 1730), (1730, 1731), (1731, 1732), (1732, 1733), (1733, 1734), (1733, 1735), (1734, 1734), (1734, 1735), (1735, 1736), (1735, 1737), (1736, 1736), (1736, 1737), (1737, 1739), (1738, 1749), (1739, 1740), (1740, 1741), (1741, 1742), (1742, 1743), (1743, 1744), (1743, 1745), (1744, 1744), (1744, 1745), (1745, 1746), (1745, 1747), (1745, 1748), (1746, 1747), (1746, 1748), (1747, 1747), (1747, 1748), (1748, 1753), (1748, 1750), (1748, 1751), (1749, 1760), (1749, 1762), (1750, 1753), (1750, 1750), (1750, 1751), (1751, 1752), (1752, 1757), (1752, 1758), (1753, 1754), (1754, 1755), (1755, 1756), (1756, 1757), (1756, 1758), (1757, 1757), (1757, 1758), (1758, 1761), (1758, 1759), (1759, 1761), (1759, 1759), (1760, 1760), (1760, 1762), (1762, 1686), (1762, 1687)]

        start = time.time()
        result = str(alg.generate(nodes, edges, 0, []))
        end1 = time.time()
        alg.CACHE_ENABLED = False
        result2 = str(alg.generate(nodes, edges, 0, []))
        end2 = time.time()

        print "Time taken with cache: ", end1 - start
        print "Time taken without cache: ", end2 - start

        self.assertEqual(result, result2)
        # Assert that the caching is giving some speedup.
        # I was seeing roughly 10x speedup with caching.
        self.assertTrue(end1 - start < (end2 - start) / 0.5)

    def test_multiple_in_edges(self):
        nodes = [4, 9, 10, 11, 12, 16, 17, 18, 19, 20, 8]
        edges = [(4, 16), (9, 9), (9, 17), (10, 10), (10, 18), (11, 11), (11, 19), (12, 12), (12, 20), (16, 9), (16, 17), (17, 10), (17, 18), (18, 11), (18, 19), (19, 12), (19, 20), (8, 4)] 


if __name__ == "__main__":
    unittest.main()
