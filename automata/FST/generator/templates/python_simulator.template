import argparse

{#
@param group_numbers
@param graphs
@param translators
#}

graphs = [
{% for group_number in group_numbers %}
{{ graphs[group_number].to_python_string() }},
{% endfor %}
None
]

translators = [
{%for group_number in group_numbers %}
[
{%for translator in translators %}
{% if translator is not none %}
{{ translator.to_string() }},
{% else %}
None, # Had a translator, but it was None.
{% endif %}
{%endfor%}
None
],
{%endfor%}
[]
]

def generate_neighbors_lookup(nodes, edges):
    lookup = {}
    for n in nodes:
        lookup[n] = set()

    for s, e in edges:
        lookup[s].add(e)
    return lookup

class ActiveState(object):
    def __init__(self, state_no, start_index):
        self.state_no = state_no
        self.start_index = start_index

    def __hash__(self):
        return hash((self.state_no, self.start_index))

    def __eq__(self, other):
        return hash(self) == hash(other)

def exec_automata(i, inputstring, trace=False):
    active_states = set([ActiveState(graphs[i]['start_state'], 0)])
    matches = []

    neighbors = generate_neighbors_lookup(graphs[i]['nodes'], graphs[i]['edges'])
    symbol_lookup = graphs[i]['symbol_lookup']
    accepting_states = graphs[i]['accepting_states']
    end_states = graphs[i]['end_states']
    start_state = graphs[i]['start_state']
    character_index = -1
    for character in inputstring:
        character = ord(character)
        character_index += 1
        if translators[i][0] is not None:
            character = translators[i][0][character]
        if trace:
            print "Read symbol ", character
            print "In states ", active_states
        next_states = set([ActiveState(start_state, character_index)])
        for current_state in active_states:
            neighbor_states = neighbors[current_state.state_no]
            state_state_index = current_state.start_index

            for next_state_no in neighbor_states:
                if character in symbol_lookup[(current_state.state_no, next_state_no)]:
                    next_states.add(ActiveState(next_state_no, state_state_index))
        active_states = next_states

        for state in next_states:
            # We use the end-state hack here because the generator
            # doesn't properly deal with end states in intermediately-generated
            # automata (i.e. given this implementation, they should be
            # made accepts) --- they don't need to accept
            # in every implementation.
            if state.state_no in accepting_states or state.state_no in end_states:
                matches.append((state.start_index, character_index))

    return matches

def read_file(filename):
    with open(filename, 'r') as f:
        while True:
            data = f.read(1024)
            if not data:
                break
            for character in data:
                yield character

def write(filename, matches):
    with open(filename, 'w') as f:
        for i in range(0, len(matches), 1000):
            max_i = min(i + 1000, len(matches))
            result = "\n".join([str(match) for match in matches[i:max_i]]) + "\n"
            f.write(result)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('group_number', type=int)
    parser.add_argument('input_file')
    parser.add_argument('report_file')
    args = parser.parse_args()

    matches = exec_automata(0, read_file(args.input_file))
    write(args.report_file, matches)
